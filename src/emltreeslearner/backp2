// Include MicroPython API.
#include "py/dynruntime.h"

#define TDC_DEBUG_PRINT(X) mp_printf(&mp_plat_print,"%s",X);
#define TDC_DEBUG_PRINTLN(X) mp_printf(&mp_plat_print,"%s\n\r",X);
#define TDC_DEBUG_PRINT_F(X) mp_printf(&mp_plat_print,"%f",(double)X);
#define TDC_DEBUG_PRINT_U(X) mp_printf(&mp_plat_print,"%lu",(uint32_t)X);
#define tdc_malloc(num_of_bytes) m_malloc(num_of_bytes)
#define tdc_realloc(ptr,old_num_bytes,new_num_bytes) m_realloc(ptr,new_num_bytes)
#define tdc_free(ptr,num_of_bytes) m_free(ptr)
#define TDL_RAW
#include "/home/alex/Documents/PlatformIO/Projects/decisionTreeC/lib/TinyDecisionTreeClassifierC/src/TinyDecisionTreeClassifierC/TinyDecisionTreeClassifierC.h"
#include "/home/alex/Documents/PlatformIO/Projects/decisionTreeC/lib/TinyDecisionTreeClassifierC/src/TinyDecisionTreeClassifierLoaderC/TinyDecisionTreeClassifierLoaderC.h"

// memset is used by some standard C constructs
#if !defined(__linux__)
void *memcpy(void *dst, const void *src, size_t n) {
    return mp_fun_table.memmove_(dst, src, n);
}
void *memset(void *s, int c, size_t n) {
    return mp_fun_table.memset_(s, c, n);
}
#endif

// This structure represents Eml Tree Learner instance objects.
typedef struct _emltreeslearner_EmlTreeLearner_obj_t {
    mp_obj_base_t base;
    mp_uint_t max_depth;
    mp_uint_t min_sample_split;
    float * roots;
    float * nodes;
    uint32_t rootsSize;
    uint32_t nodesSize;
    struct Node* root;

    uint32_t readrootcounter;
    uint32_t readnodecounter;
} emltreeslearner_EmlTreeLearner_obj_t;

mp_obj_full_type_t emltreeslearner_type_EmlTreeLearner;

// This represents EmlTreeLearner.__new__ and EmlTreeLearner.__init__, which is called when
// the user instantiates a EmlTreeLearner object.
STATIC mp_obj_t emltreeslearner_EmlTreeLearner_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    // Allocates the new object and sets the type.
    TDC_DEBUG_PRINTLN("New object");
    mp_arg_check_num(n_args, n_kw, 3, 3, false);
    
    emltreeslearner_EmlTreeLearner_obj_t *self = mp_obj_malloc(emltreeslearner_EmlTreeLearner_obj_t, type);
    mp_uint_t trees_number =  mp_obj_get_int(args[0]);
    if(trees_number!=1){
        mp_raise_ValueError(MP_ERROR_TEXT("For now only one tree is supported"));
    }
    self->max_depth = mp_obj_get_int(args[1]);
    self->min_sample_split = mp_obj_get_int(args[2]);
    self->root = NULL;
    self->roots = NULL;
    self->nodes = NULL;
    self->readnodecounter = 0;
    self->readrootcounter = 0;
    return MP_OBJ_FROM_PTR(self);
}

STATIC mp_obj_t emltreeslearner_EmlTreeLearner_fit(mp_obj_fun_bc_t *self_in,size_t n_args, size_t n_kw, mp_obj_t *args) {
    mp_arg_check_num(n_args, n_kw, 4, 4, false);

    mp_obj_t X = args[1];
    mp_obj_t Y = args[2];
    mp_obj_t row_stride = args[3];


    emltreeslearner_EmlTreeLearner_obj_t *self = MP_OBJ_TO_PTR(self_in);
    if(!mp_obj_is_int(row_stride)){
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting int array on row_stride"));
    }
    uint32_t row_str = mp_obj_get_int(row_stride);

    TDC_DEBUG_PRINTLN("1");
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(X, &bufinfo, MP_BUFFER_RW);
    if (bufinfo.typecode != 'f') {
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting float array on Y"));
    }
    TDC_DEBUG_PRINTLN("2");

    mp_buffer_info_t bufinfo0;
    mp_get_buffer_raise(Y, &bufinfo0, MP_BUFFER_RW);
    if (bufinfo0.typecode != 'f') {
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting float array on Y"));
    }
    TDC_DEBUG_PRINTLN("3");

    if((mp_uint_t)((bufinfo.len)/sizeof(float)/row_str)!=(mp_uint_t)((bufinfo0.len)/sizeof(float))){
        mp_raise_ValueError(MP_ERROR_TEXT("X and Y have different number of rows"));    
    }

    tdc_fit(&self->root,(float*)bufinfo.buf,(float*)bufinfo0.buf,(bufinfo0.len)/sizeof(float),row_str,self->max_depth,self->min_sample_split);
    return mp_const_none;
}
// STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(emltreeslearner_EmlTreeLearner_fit_obj, 4, 4, emltreeslearner_EmlTreeLearner_fit);

STATIC mp_obj_t emltreeslearner_EmlTreeLearner_plot(mp_obj_t self_in) {
    emltreeslearner_EmlTreeLearner_obj_t *self = MP_OBJ_TO_PTR(self_in);
    tdc_plot(self->root,0);
    return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(emltreeslearner_EmlTreeLearner_plot_obj, emltreeslearner_EmlTreeLearner_plot);

STATIC mp_obj_t emltreeslearner_EmlTreeLearner_predict(mp_obj_t self_in, mp_obj_t X) {
    emltreeslearner_EmlTreeLearner_obj_t *self = MP_OBJ_TO_PTR(self_in);
    mp_buffer_info_t bufinfo;

    mp_get_buffer_raise(X, &bufinfo, MP_BUFFER_RW);
    if (bufinfo.typecode != 'f') {
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting float array on X"));
    }

    return mp_obj_new_float(tdc_predict(self->root,bufinfo.buf));
}
STATIC MP_DEFINE_CONST_FUN_OBJ_2(emltreeslearner_EmlTreeLearner_predict_obj, emltreeslearner_EmlTreeLearner_predict);

STATIC mp_obj_t emltreeslearner_EmlTreeLearner_score(size_t n_args, const mp_obj_t *args) {
    mp_obj_t self_in = args[0];
    mp_obj_t X = args[1];
    mp_obj_t Y = args[2];
    mp_obj_t row_stride = args[3];

    emltreeslearner_EmlTreeLearner_obj_t *self = MP_OBJ_TO_PTR(self_in);

    if(!mp_obj_is_int(row_stride)){
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting int array on row_stride"));
    }
    uint32_t row_str = mp_obj_get_int(row_stride);

    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(X, &bufinfo, MP_BUFFER_RW);
    if (bufinfo.typecode != 'f') {
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting float array on Y"));
    }
    
    mp_buffer_info_t bufinfo0;
    mp_get_buffer_raise(Y, &bufinfo0, MP_BUFFER_RW);
    if (bufinfo0.typecode != 'f') {
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting float array on Y"));
    }

    if((mp_uint_t)((bufinfo.len)/sizeof(float)/row_str)!=(mp_uint_t)((bufinfo0.len)/sizeof(float))){
        mp_raise_ValueError(MP_ERROR_TEXT("X and Y have different number of rows"));    
    }

    mp_obj_t rslt = mp_obj_new_float(tdc_score(self->root,(float*)bufinfo.buf,(float*)bufinfo0.buf,(bufinfo0.len)/sizeof(float),row_str));
    return rslt;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(emltreeslearner_EmlTreeLearner_score_obj, 4, 4, emltreeslearner_EmlTreeLearner_score);

STATIC mp_obj_t emltreeslearner_EmlTreeLearner_addnode(size_t n_args, const mp_obj_t *args) {
    mp_obj_t self_in = args[0];
    mp_obj_t left = args[1];
    mp_obj_t right = args[2];
    mp_obj_t feature = args[3];
    mp_obj_t value = args[4];

    emltreeslearner_EmlTreeLearner_obj_t *self = MP_OBJ_TO_PTR(self_in);

    if(!mp_obj_is_int(left)){
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting int on left"));
    }
    int32_t left_v = mp_obj_get_int(left);

    if(!mp_obj_is_int(right)){
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting int on right"));
    }
    int32_t right_v = mp_obj_get_int(right);

    if(!mp_obj_is_int(feature)){
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting int on feature"));
    }
    int32_t feature_v = mp_obj_get_int(feature);
    float value_v = mp_obj_get_float_to_f(value);

    if(self->nodes == NULL){
        if(self->nodes!=NULL)tdc_free(self->nodes,self->nodesSize);
        self->nodes = (float*)tdc_malloc(sizeof(float)*4);
        self->nodes[0]=feature_v;
        self->nodes[1]=value_v;
        self->nodes[2]=left_v;
        self->nodes[3]=right_v;
        self->nodesSize = 4;
    }else{
        self->nodes = (float*)tdc_realloc(self->nodes,self->nodesSize,self->nodesSize+sizeof(float)*4);
        self->nodes[self->nodesSize]=feature_v;
        self->nodes[self->nodesSize+1]=value_v;
        self->nodes[self->nodesSize+2]=left_v;
        self->nodes[self->nodesSize+3]=right_v;
        self->nodesSize+=4;
    }
    return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(emltreeslearner_EmlTreeLearner_addnode_obj, 5, 5, emltreeslearner_EmlTreeLearner_addnode);

STATIC mp_obj_t emltreeslearner_EmlTreeLearner_addroot(size_t n_args, const mp_obj_t *args) {
    mp_obj_t self_in = args[0];
    mp_obj_t value = args[1];
    emltreeslearner_EmlTreeLearner_obj_t *self = MP_OBJ_TO_PTR(self_in);

    if(!mp_obj_is_int(value)){
        mp_raise_ValueError(MP_ERROR_TEXT("Expecting int on root"));
    }
    int32_t value_v = mp_obj_get_int(value);

    if(self->roots == NULL){
        if(self->roots!=NULL)tdc_free(self->roots,self->rootsSize);
        self->roots = (float*)tdc_malloc(sizeof(float)*4);
        self->roots[0]=value_v;
        self->rootsSize = 1;
    }else{
        self->roots = (float*)tdc_realloc(self->roots,self->rootsSize,self->rootsSize+sizeof(float));
        self->roots[self->rootsSize]=value_v;
        self->rootsSize+=1;
    }
    return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(emltreeslearner_EmlTreeLearner_addroot_obj, 5, 5, emltreeslearner_EmlTreeLearner_addroot);

STATIC mp_obj_t emltreeslearner_EmlTreeLearner_loadtreefrombuf(size_t n_args, const mp_obj_t *args) {
    mp_obj_t self_in = args[0];
    emltreeslearner_EmlTreeLearner_obj_t *self = MP_OBJ_TO_PTR(self_in);

    if(self->root!=NULL)tdc_free(self->root,sizeof(struct Node));
    struct Node** rootsLoaded = tdc_load_raw(self->roots,self->nodes,self->rootsSize,self->nodesSize);
    self->root = rootsLoaded[0];
    tdc_free(rootsLoaded,sizeof(struct Node)*self->rootsSize);
    tdc_free(self->nodes,sizeof(float)*self->nodesSize);
    tdc_free(self->roots,sizeof(float)*self->rootsSize);
    return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(emltreeslearner_EmlTreeLearner_loadtreefrombuf_obj, 1, 1, emltreeslearner_EmlTreeLearner_loadtreefrombuf);

STATIC mp_obj_t emltreeslearner_EmlTreeLearner_savetreetobuf(size_t n_args, const mp_obj_t *args) {
    mp_obj_t self_in = args[0];
    emltreeslearner_EmlTreeLearner_obj_t *self = MP_OBJ_TO_PTR(self_in);

    self->readnodecounter = 0;
    self->readrootcounter = 0;

    if(self->root != NULL){
        if(self->roots != NULL)tdc_free(self->roots,self->rootsSize);
        self->roots = (float*)tdc_malloc(sizeof(float)*self->rootsSize);
        if(self->nodes != NULL){
            tdc_free(self->nodes,self->nodesSize);
            self->nodes = NULL;
        }
        tdc_save_raw(&self->nodes,&self->nodesSize,self->roots,self->rootsSize,&(self->root));
    }
    return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(emltreeslearner_EmlTreeLearner_savetreetobuf_obj, 1, 1, emltreeslearner_EmlTreeLearner_savetreetobuf);

STATIC mp_obj_t emltreeslearner_EmlTreeLearner_readroot(size_t n_args, const mp_obj_t *args) {
    mp_obj_t self_in = args[0];
    emltreeslearner_EmlTreeLearner_obj_t *self = MP_OBJ_TO_PTR(self_in);

    if(self->readrootcounter!=self->rootsSize){
        mp_obj_t nodedata[1] = {
            mp_obj_new_int((long int)self->roots[self->readrootcounter]),  // Integer value
        };
        self->readrootcounter++;
        return mp_obj_new_tuple(1, nodedata);
    }
    return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(emltreeslearner_EmlTreeLearner_readroot_obj, 1, 1, emltreeslearner_EmlTreeLearner_readroot);

STATIC mp_obj_t emltreeslearner_EmlTreeLearner_readnode(size_t n_args, const mp_obj_t *args) {
    mp_obj_t self_in = args[0];
    emltreeslearner_EmlTreeLearner_obj_t *self = MP_OBJ_TO_PTR(self_in);

    if(self->readnodecounter!=(long int)(self->nodesSize/TDL_LOADER_NODES_ROW_STRIDE)){
        mp_obj_t nodedata[4] = {
            mp_obj_new_int((long int)self->nodes[self->readnodecounter*TDL_LOADER_NODES_ROW_STRIDE]),  
            mp_obj_new_float((long int)self->nodes[self->readnodecounter*TDL_LOADER_NODES_ROW_STRIDE+1]),
            mp_obj_new_int((long int)self->nodes[self->readnodecounter*TDL_LOADER_NODES_ROW_STRIDE+2]),  
            mp_obj_new_int((long int)self->nodes[self->readnodecounter*TDL_LOADER_NODES_ROW_STRIDE+3]),  
        };
        self->readnodecounter++;
        return mp_obj_new_tuple(4, nodedata);
    }
    return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(emltreeslearner_EmlTreeLearner_readnode_obj, 1, 1, emltreeslearner_EmlTreeLearner_readnode);

mp_map_elem_t emltreeslearner_EmlTreeLearner_locals_dict_table[10];
STATIC MP_DEFINE_CONST_DICT(emltreeslearner_EmlTreeLearner_locals_dict, emltreeslearner_EmlTreeLearner_locals_dict_table);

// This is the entry point and is called when the module is imported
mp_obj_t mpy_init(mp_obj_fun_bc_t *self, size_t n_args, size_t n_kw, mp_obj_t *args) {
    // This must be first, it sets up the globals dict and other things
    MP_DYNRUNTIME_INIT_ENTRY

    mp_store_global(MP_QSTR_EmlTreeLearner, MP_OBJ_FROM_PTR(&emltreeslearner_type_EmlTreeLearner));

    emltreeslearner_type_EmlTreeLearner.base.type = (void*)&mp_fun_table.type_type;
    emltreeslearner_type_EmlTreeLearner.flags = MP_TYPE_FLAG_NONE;
    emltreeslearner_type_EmlTreeLearner.name = MP_QSTR_EmlTreeLearner;

    MP_OBJ_TYPE_SET_SLOT(&emltreeslearner_type_EmlTreeLearner, make_new, &emltreeslearner_EmlTreeLearner_make_new, 0);

    emltreeslearner_EmlTreeLearner_locals_dict_table[0] = (mp_map_elem_t){ MP_OBJ_NEW_QSTR(MP_QSTR_fit), MP_DYNRUNTIME_MAKE_FUNCTION(emltreeslearner_EmlTreeLearner_fit)};
    emltreeslearner_EmlTreeLearner_locals_dict_table[1] = (mp_map_elem_t){ MP_OBJ_NEW_QSTR(MP_QSTR_plot), MP_OBJ_FROM_PTR(&emltreeslearner_EmlTreeLearner_plot_obj) };
    emltreeslearner_EmlTreeLearner_locals_dict_table[2] = (mp_map_elem_t){ MP_OBJ_NEW_QSTR(MP_QSTR_predict), MP_OBJ_FROM_PTR(&emltreeslearner_EmlTreeLearner_predict_obj) };
    emltreeslearner_EmlTreeLearner_locals_dict_table[3] = (mp_map_elem_t){ MP_OBJ_NEW_QSTR(MP_QSTR_score), MP_OBJ_FROM_PTR(&emltreeslearner_EmlTreeLearner_score_obj) };
    emltreeslearner_EmlTreeLearner_locals_dict_table[4] = (mp_map_elem_t){ MP_OBJ_NEW_QSTR(MP_QSTR_addnode), MP_OBJ_FROM_PTR(&emltreeslearner_EmlTreeLearner_addnode_obj) };
    emltreeslearner_EmlTreeLearner_locals_dict_table[5] = (mp_map_elem_t){ MP_OBJ_NEW_QSTR(MP_QSTR_addroot), MP_OBJ_FROM_PTR(&emltreeslearner_EmlTreeLearner_addroot_obj) };
    emltreeslearner_EmlTreeLearner_locals_dict_table[6] = (mp_map_elem_t){ MP_OBJ_NEW_QSTR(MP_QSTR_loadtreefrombuf), MP_OBJ_FROM_PTR(&emltreeslearner_EmlTreeLearner_loadtreefrombuf_obj) };
    emltreeslearner_EmlTreeLearner_locals_dict_table[7] = (mp_map_elem_t){ MP_OBJ_NEW_QSTR(MP_QSTR_savetreetobuf), MP_OBJ_FROM_PTR(&emltreeslearner_EmlTreeLearner_savetreetobuf_obj) };
    emltreeslearner_EmlTreeLearner_locals_dict_table[8] = (mp_map_elem_t){ MP_OBJ_NEW_QSTR(MP_QSTR_readroot), MP_OBJ_FROM_PTR(&emltreeslearner_EmlTreeLearner_readroot_obj) };
    emltreeslearner_EmlTreeLearner_locals_dict_table[9] = (mp_map_elem_t){ MP_OBJ_NEW_QSTR(MP_QSTR_readnode), MP_OBJ_FROM_PTR(&emltreeslearner_EmlTreeLearner_readnode_obj) };

    MP_OBJ_TYPE_SET_SLOT(&emltreeslearner_type_EmlTreeLearner, locals_dict, (void*)&emltreeslearner_EmlTreeLearner_locals_dict, 10);

    // This must be last, it restores the globals dict
    MP_DYNRUNTIME_INIT_EXIT
}

